import java.util.*;

class Solution {
    public int mostProfitablePath(int[][] edges, int bob, int[] amount) {
        // Step 1: Build the tree as an adjacency list
        int n = amount.length;
        List<Integer>[] tree = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            tree[i] = new ArrayList<>();
        }
        for (int[] edge : edges) {
            tree[edge[0]].add(edge[1]);
            tree[edge[1]].add(edge[0]);
        }
        
        // Step 2: Find Bob's path to node 0
        int[] bobTime = new int[n];
        Arrays.fill(bobTime, Integer.MAX_VALUE);
        findBobPath(bob, -1, 0, bobTime, tree);
        
        // Step 3: DFS to find Alice's best path
        return dfs(0, -1, 0, 0, bobTime, tree, amount);
    }
    
    private boolean findBobPath(int node, int parent, int time, int[] bobTime, List<Integer>[] tree) {
        bobTime[node] = time;
        if (node == 0) return true;
        
        for (int neighbor : tree[node]) {
            if (neighbor != parent && findBobPath(neighbor, node, time + 1, bobTime, tree)) {
                return true;
            }
        }
        bobTime[node] = Integer.MAX_VALUE; // Reset if not on the path
        return false;
    }
    
    private int dfs(int node, int parent, int time, int income, int[] bobTime, List<Integer>[] tree, int[] amount) {
        // Compute the amount Alice can collect at this node
        if (time < bobTime[node]) {
            income += amount[node];
        } else if (time == bobTime[node]) {
            income += amount[node] / 2;
        }
        
        // Base case: If leaf node, return income
        if (tree[node].size() == 1 && node != 0) {
            return income;
        }
        
        int maxProfit = Integer.MIN_VALUE;
        for (int neighbor : tree[node]) {
            if (neighbor != parent) {
                maxProfit = Math.max(maxProfit, dfs(neighbor, node, time + 1, income, bobTime, tree, amount));
            }
        }
        
        return maxProfit;
    }
}