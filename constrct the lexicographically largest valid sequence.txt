class Solution {
    public int[] constructDistancedSequence(int n) {
        int len = 2 * n - 1;  
        int[] res = new int[len];  
        boolean[] used = new boolean[n + 1];  
        backtrack(res, used, n, 0);
        return res;
    }

    private boolean backtrack(int[] res, boolean[] used, int n, int idx) {
        if (idx == res.length) return true;  
        if (res[idx] != 0) return backtrack(res, used, n, idx + 1);  

        for (int i = n; i >= 1; i--) {  
            if (used[i]) continue;  
            if (i > 1 && (idx + i >= res.length || res[idx + i] != 0)) continue;  

            res[idx] = i;  
            if (i > 1) res[idx + i] = i;  
            used[i] = true;  

            if (backtrack(res, used, n, idx + 1)) return true;  

            res[idx] = 0;  
            if (i > 1) res[idx + i] = 0;  
            used[i] = false;  
        }
        return false;
    }
}
